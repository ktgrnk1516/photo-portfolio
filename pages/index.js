import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { PostCard, FirstPhoto, TimeSlider } from "../components";
import { getPosts } from "../services";
import { useEffect } from "react";
import { useScroll } from "../hooks";

export default function Home({ posts, timeClick,isVisible }) {
  //ローカルのpostデータ=>graphCMSから持ってくるからコメントアウト
  // const posts = [
  //   {
  //     image: "https://drive.google.com/uc?id=1hHg5t7XvX-zvm4Bos-mPzF6e16n0-Orx",
  //     time: "12/02/2022",
  //     desc: "Osaka Night",
  //     place: "Osaka",
  //   },
  // ];

  useEffect(() => {
    // //配列postsをソート/オブジェクトの昇順ソート
    // //https://keizokuma.com/js-array-object-sort/
    // //post.node.timeを時間のみの形にしたい（mapで？）
    // let posttimes1 = posts.map((post) => {
    //   return post.node.time; //整形したい
    // });
    // //mapでUTC時間をAM/PMの形に整形
    // const sorttimes = posttimes1.map((time) => {
    //   const a = Date.parse(time);
    //   const b = new Date(a);
    //   //https://qiita.com/Naoki_kkc/items/2a29287834c453d23ecf
    //   //JavaScriptで時刻の二桁目をゼロ埋めするQiita
    //   //.toString().padStart(2, '0')!!!!!!
    //   const hh = b.getHours().toString().padStart(2, "0");
    //   const mm = b.getMinutes().toString().padStart(2, "0");
    //   const saisyutimes = `${hh}:${mm}`;
    //   return saisyutimes; //mapでreturn!!!
    // });
    // // sorttimes.sort(function (a, b) {
    // //   return a > b ? 1 : -1;
    // // });
    // // console.log(sorttimes);
    // //配列を書き換え
    // posts.map((post, index) => {
    //   post.node.time = sorttimes[index];
    // });
    // // console.log([posts]);
    // //配列posts：オブジェクトの時間の昇順ソート
    // let result = posts.sort(function (a, b) {
    //   return a.node.time < b.node.time ? -1 : 1;
    // });
    // // console.log([result]);
    // //-----------------------------------//
    // //AM/PMの形に整形
    // let times = result.map((post) => {
    //   return post.node.time; //整形したい
    // });
    // //mapでUTC時間をAM/PMの形に整形
    // const posttimes2 = times.map((time) => {
    //   // console.log(time.substr(0, 2));
    //   const HH = time.substr(0, 2);
    //   const MM = time.substr(3, 2);
    //   const saisyutimes =
    //     HH < 12 ? `AM ${parseInt(HH)}:${MM}` : `PM ${HH - 12}:${MM}`;
    //   return saisyutimes; //mapでreturn!!!
    // });
    // // console.log(posttimes2);
    // posts.map((post, index) => {
    //   post.node.time = posttimes2[index];
    // });
    // //配列postsにidというkeyを新しく追加する "AM 8"とか
    // posts.forEach((e) => {
    //   e.idx = e.node.time.substr(0, 4);
    // });
    // console.log([posts]);
  }, [posts]);

  //ref!!!!!!!!!
  //timeClickの状態は、_app.js=>index.js(Home)=>postCard.jsxの順で渡している
  // console.log(timeClick);
  //refの定義！（カスタムhooksで外から持ってきている）
  const postCardRef = useScroll(timeClick);

  return (
    <div className={styles.root}>
      <Head>
        <title>ktgrnk</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.body_root}>
        <div className={styles.first_photo}>
          <FirstPhoto
            // post={posts[0].node}
            posts={posts}
          />
        </div>

        <div className={styles.body_wrapper} ref={postCardRef}>
          {posts.map((post) => (
            <PostCard
              post={post.node}
              key={post.node.time}
              idx={post.idx}
              timeClick={timeClick}
            />
          ))}
        </div>
      </div>
    </div>
  );
}

//graphCMSからfetchしてくる関数
export async function getStaticProps() {
  const posts = (await getPosts()) || [];

  //配列postsをソート/オブジェクトの昇順ソート
  //https://keizokuma.com/js-array-object-sort/
  //post.node.timeを時間のみの形にしたい（mapで？）
  let posttimes1 = posts.map((post) => {
    return post.node.time; //整形したい
  });
  //mapでUTC時間をAM/PMの形に整形
  const sorttimes = posttimes1.map((time) => {
    const a = Date.parse(time);
    const b = new Date(a);

    //https://qiita.com/Naoki_kkc/items/2a29287834c453d23ecf
    //JavaScriptで時刻の二桁目をゼロ埋めするQiita
    //.toString().padStart(2, '0')!!!!!!
    const hh = b.getHours().toString().padStart(2, "0");
    const mm = b.getMinutes().toString().padStart(2, "0");
    const saisyutimes = `${hh}:${mm}`;

    return saisyutimes; //mapでreturn!!!
  });
  // sorttimes.sort(function (a, b) {
  //   return a > b ? 1 : -1;
  // });
  // console.log(sorttimes);

  //配列を書き換え
  posts.map((post, index) => {
    post.node.time = sorttimes[index];
  });

  // console.log([posts]);

  //配列posts：オブジェクトの時間の昇順ソート
  let result = posts.sort(function (a, b) {
    return a.node.time < b.node.time ? -1 : 1;
  });

  // console.log([result]);

  //-----------------------------------//

  //AM/PMの形に整形

  let times = result.map((post) => {
    return post.node.time; //整形したい
  });

  //mapでUTC時間をAM/PMの形に整形
  const posttimes2 = times.map((time) => {
    // console.log(time.substr(0, 2));
    const HH = time.substr(0, 2);
    const MM = time.substr(3, 2);

    const saisyutimes =
      HH < 12 ? `AM ${parseInt(HH)}:${MM}` : `PM ${HH - 12}:${MM}`;

    return saisyutimes; //mapでreturn!!!
  });

  // console.log(posttimes2);

  posts.map((post, index) => {
    post.node.time = posttimes2[index];
  });

  //配列postsにidというkeyを新しく追加する "AM 8"とか
  posts.forEach((e) => {
    e.idx = e.node.time.substr(0, 4);
  });

  return {
    props: { posts },
  };
}
