import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { Header, PostCard } from "../components";
import { getPosts } from "../services";
import { useEffect, useState } from "react";

export default function Home({ isVisible, posts }) {
  //ローカルのpostデータ=>graphCMSから持ってくるからコメントアウト
  // const posts = [
  //   {
  //     image: "https://drive.google.com/uc?id=1hHg5t7XvX-zvm4Bos-mPzF6e16n0-Orx",
  //     time: "12/02/2022",
  //     desc: "Osaka Night",
  //     place: "Osaka",
  //   },
  // ];

  // //スクロールによって背景色を変える
  // const [isVisible, setIsVisible] = useState(false);

  // const toggleVisibility = () => {
  //   window.scrollY > 100 ? setIsVisible(true) : setIsVisible(false);
  // };

  // useEffect(() => {
  //   window.addEventListener("scroll", toggleVisibility);
  //   return () => window.removeEventListener("scroll", toggleVisibility);
  // }, []);

  //postsをmapする？
  // const getParseTime = () => {
  useEffect(() => {
    let times = posts.map((post) => {
      return post.node.time; //整形したい
    });
    const posttimes = times.map((time) => {
      const a = Date.parse(time);
      const b = new Date(a);

      // console.log(time);
      // console.log(a);
      // console.log(b);

      const hh = b.getHours().toString();
      const mm = b.getMinutes().toString().padStart(2, "0");
      const saisyutimes = hh < 12 ? `AM ${hh}:${mm}` : `PM ${hh - 12}:${mm}`;

      return saisyutimes.toString(); //mapでreturn!!!
    });

    console.log(posttimes);

    // const chosa = posts.map((post) => {
    //   return post.node.time;

    posts.map((post, index) => {
      post.node.time = posttimes[index];
    });
  }, [posts]);

  // console.log(chosa[0]);
  // chosa[0] = posttimes[0];

  // chosa = posttimes
  // console.log(chosa);
  //----------------------------------//
  // for ですべての要素に行いたい。
  // for (let i = 0; i < times.length; i++) {
  //   const a = Date.parse(times[i]);
  //   const b = new Date(a);
  //   const hh = b.getHours();
  //   const mm = b.getMinutes().toString().padStart(2, "0");

  //   const posttimes = hh < 12 ? `AM ${hh}:${mm}` : `PM ${hh - 12}:${mm}`;
  //   console.log(posttimes);

  //https://qiita.com/Naoki_kkc/items/2a29287834c453d23ecf
  //JavaScriptで時刻の二桁目をゼロ埋めするQiita
  //.toString().padStart(2, '0')!!!!!!
  // };
  // getParseTime();

  return (
    <div>
      <Head>
        <title>ktgrnk</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.body_root}>
        {/* <div className="header_wrapper">
          <Header />
        </div> */}
        <div className={styles.body_wrapper}>
          {posts.map((post) => (
            <PostCard post={post.node} key={post.node.time} />
          ))}
        </div>
      </div>
    </div>
  );
}

//graphCMSからfetchしてくる関数
export async function getStaticProps() {
  const posts = (await getPosts()) || [];

  // let times = posts.map((post) => {
  //   return post.node.time; //整形したい
  // });

  // const posttimes = times.map((time) => {
  //   const a = Date.parse(time);
  //   const b = new Date(a);
  //   const hh = b.getHours();
  //   const mm = b.getMinutes().toString().padStart(2, "0");
  //   const saisyutimes = hh < 12 ? `AM ${hh}:${mm}` : `PM ${hh - 12}:${mm}`;

  //   return saisyutimes; //mapでreturn!!!
  // });
  // // console.log(posttimes);
  // times = posttimes;
  // console.log(times);

  return {
    props: { posts },
  };
}
